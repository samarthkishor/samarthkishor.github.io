<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
  <channel>
    <title>
<![CDATA[Samarth's Blog]]>
    </title>
    <description>
<![CDATA[Samarth's Blog]]>
    </description>
    <link>https://samarthkishor.github.io/blog/</link>
    <lastBuildDate>Sun, 08 Mar 2020 19:45:11 -0400</lastBuildDate>
    <item>
      <title>
<![CDATA[Interactive OCaml Development]]>
      </title>
      <description>
<![CDATA[
    <p>Interactive development features are mostly found in
    dynamically-typed interpreted programming languages like Python
    or JavaScript. While OCaml is a statically-typed compiled
    language, it is still possible to program in an interactive
    style using a REPL. However, OCaml will never be quite as
    flexible and interactive as something like Lisp because of its
    greatest feature: the strong static type system.</p>
    <div id="outline-container-orge8b6bd2" class="outline-2">
      <h2 id="orge8b6bd2">Testing functions using the REPL</h2>
      <div class="outline-text-2" id="text-orge8b6bd2">
        <p>One of the nicest features of OCaml is that is has both
        a byte-code compiler (<code>ocamlc</code>) and a
        native-code compiler (<code>ocamlopt</code>). This means
        that you can develop programs in an interactive, <a href=
        "http://www.paulgraham.com/progbot.html">bottom-up</a>
        style using the REPL. Bottom-up development is a technique
        most-often leveraged by Lisp programmers in which you can
        write a single function, compile it and send it to the
        REPL, and then test that function interactively in the
        REPL. OCaml’s fast bytecode compiler makes it possible to
        use this technique that is usually unique to Lisps and
        interpreted languages.</p>
      </div>
      <div id="outline-container-org22832ff" class="outline-3">
        <h3 id="org22832ff">Sending code to the REPL in Emacs</h3>
        <div class="outline-text-3" id="text-org22832ff">
          <p>I’ll describe the process for interactive development
          using Emacs which is my text editor of choice. Similar
          techniques should exist for other editors such as VS Code
          or Vim.</p>
          <p>OCaml’s REPL is called <code>utop</code> and it has a
          lot of nice features that make it well-suited for
          interactive development. If you’re using Emacs, you can
          send your OCaml code to <code>utop</code> to be
          evaluated. Here’s an example of using <code>utop</code>
          to test a single function.</p>
          <div class="org-src-container">
            <pre class="src src-ocaml"><span style=
            "color: #f5deb3; font-weight: bold;">open </span><span style=
            "color: #ECCC87;">Base</span>

<span style=
"color: #f5deb3; font-weight: bold;">let</span> <span style=
"color: #8EBCBB;">sum_list</span> <span style=
"color: #dac6d6;">list</span> = <span style=
"color: #ECCC87;">List.</span>fold <span style=
"color: #B58DAE;">~f</span>:( <span style=
"color: #8EBCBB;">+</span> ) <span style=
"color: #B58DAE;">~init</span>:<span style=
"color: #B58DAE; font-weight: bold;">0</span> list
</pre>
          </div>
          <p>To send this code to <code>utop</code>, highlight it
          and press <code>C-x C-r</code> (or <code>M-x
          utop-eval-region RET</code>). You can even send an entire
          buffer to <code>utop</code> by pressing <code>C-c
          C-b</code> via the function
          <code>utop-eval-buffer</code>. If you use the
          <code>dune</code> build system and configure Emacs
          appropriately (instructions on how to do this are in the
          <a href=
          "https://github.com/ocaml-community/utop#main-setup">utop
          documentation</a>), a dialog will pop up saying: “utop
          command line: opam config exec – dune utop . – -emacs”.
          Press <code>RET</code> to evaluate the code.</p>
          <p>You might have seen a message saying “Error: unbound
          module Base”. This code uses <a href=
          "https://opensource.janestreet.com/base/">Jane Street’s
          Base alternative standard library</a> which makes things
          a bit more complicated, since <code>utop</code> does not
          know about Base by default.</p>
          <p>To solve this, create a new file in the same directory
          called <code>.ocamlinit</code>. <code>utop</code> reads
          this file before starting and executes the commands
          specified. You just need to include a single line to load
          the Base library into <code>utop</code>:</p>
          <div class="org-src-container">
            <pre class="src src-ocaml"><span style=
            "color: #778899;">#require</span> <span style=
            "color: #A2BF8A;">"base"</span><span style=
            "color: #ff4500;">;;</span>
</pre>
          </div>
          <p>Now try the previous steps again to load the
          <code>sum_list</code> function into <code>utop</code>. If
          this still doesn’t work, make sure your <code>opam</code>
          environment is set up correctly by running the command
          <code>opam switch</code> in a terminal and following the
          instructions.</p>
          <p>Once everything is working, go ahead and test the
          function in the REPL by running <code>sum_list [1; 2;
          3];;</code> (the double semicolons at the end of the line
          are important because <code>utop</code> uses them to mark
          the end of an expression). If you want to make changes to
          the function, simply switch back to the OCaml buffer,
          edit the code, and send it back to <code>utop</code>.</p>
        </div>
      </div>
      <div id="outline-container-orgb24de73" class="outline-3">
        <h3 id="orgb24de73">Working with multiple files in the
        REPL</h3>
        <div class="outline-text-3" id="text-orgb24de73">
          <p>The technique I described above works great within a
          single file, but things get complicated once you send
          code from multiple files to the same <code>utop</code>
          instance. For example, say you made the
          <code>sum_list</code> function within a file called
          <code>test.ml</code> and sent that code to
          <code>utop</code>. Now you want to use
          <code>Test.sum_list</code> within another file, so you
          create a new file called <code>use_test.ml</code> which
          implements a new function:</p>
          <div class="org-src-container">
            <pre class="src src-ocaml"><span style=
            "color: #f5deb3; font-weight: bold;">let</span> <span style=
            "color: #8EBCBB;">double_sum_list</span> <span style=
            "color: #dac6d6;">list</span> = (<span style=
            "color: #ECCC87;">Test.</span>sum_list list) * <span style=
            "color: #B58DAE; font-weight: bold;">2</span>
</pre>
          </div>
          <p>Now when you go to send this new function to
          <code>utop</code>, you run into an error: “Error: Unbound
          module Test”.</p>
          <p>Here’s the full sample <code>utop</code> session:</p>
          <pre class="example">
utop[0]&gt; open Base

let sum_list list = List.fold ~f:( + ) ~init:0 list
;;
val sum_list : int list -&gt; int = &lt;fun&gt;
utop[1]&gt; sum_list [1; 2; 3];;
- : int = 6
utop[2]&gt; let double_sum_list list = (Test.sum_list list) * 2
;;

Error: Unbound module Test
</pre>
          <p>Since OCaml isn’t really made to be an interactive
          programming language, there isn’t a clean solution for
          this problem as far as I’m aware. However, you can hack
          around this using the same <code>.ocamlinit</code> file
          that I mentioned before.</p>
          <p>Kill <code>utop</code> and modify the
          <code>.ocamlinit</code> file to look like this:</p>
          <div class="org-src-container">
            <pre class="src src-ocaml"><span style=
            "color: #778899;">#require</span> <span style=
            "color: #A2BF8A;">"base"</span><span style=
            "color: #ff4500;">;;</span>
<span style="color: #778899;">#mod_use</span> <span style=
"color: #A2BF8A;">"test.ml"</span><span style=
"color: #ff4500;">;;</span>
</pre>
          </div>
          <p>The <code>#mod_use</code> function tells
          <code>utop</code> to import the given file into the REPL
          as a module. This is important because it lets us call
          <code>sum_list</code> as <code>Test.sum_list</code>.
          <code>#mod_use</code> essentially wraps up the functions
          from the file into a module and sends that module to be
          evaluated in the REPL, which is basically how the OCaml
          compiler treats OCaml files. We don’t want to change our
          development style to work with the REPL since
          <code>utop</code> is configurable enough.</p>
          <p>There is one caveat with this approach: you have to
          edit <code>.ocamlinit</code> and restart
          <code>utop</code> whenever you create a new file. If you
          switch files (say you were sending code from
          <code>use_test.ml</code> to the REPL but now want to work
          with <code>test.ml</code>), you have to restart
          <code>utop</code> each time to ensure that it has the
          most up-to-date version of all your files/modules. This
          is a bit of a pain and I’m not sure if there’s a solution
          to this problem given OCaml’s static nature.</p>
        </div>
      </div>
    </div>
    <div id="outline-container-org9a2da46" class="outline-2">
      <h2 id="org9a2da46">Pretty-printing</h2>
      <div class="outline-text-2" id="text-org9a2da46">
        <p>A major part of interactive development is seeing the
        results of functions in the REPL. Since OCaml has a strong
        type system without dynamic dispatch, you can only print
        strings—this means that you have to write functions to
        convert your user-defined types (which are everywhere in
        idiomatic OCaml code) to strings each time you want to
        print them. This is a pain, but luckily there’s an elegant
        solution: <a href=
        "https://github.com/ocaml-ppx/ppx_deriving#plugin-show">ppx</a>.</p>
        <p><code>ppx</code> is a syntax extension to OCaml which
        acts as a macro that automatically generates code to
        pretty-print a custom type
        (<code>ppx_deriving.show</code>), generate equality
        functions (<code>ppx_deriving.eq</code>), etc.</p>
        <p>To pretty-print custom types annotated with
        <code>[@@deriving show]</code> in <code>utop</code>, you’ll
        need to once again modify the <code>.ocamlinit</code> file
        and add the following line:</p>
        <div class="org-src-container">
          <pre class="src src-ocaml"><span style=
          "color: #778899;">#install_printer</span> <span style=
          "color: #ECCC87;">Module.</span>pp<span style=
          "color: #ff4500;">;;</span>
</pre>
        </div>
        <p>where <code>Module</code> is the name of the module
        which has the corresponding <code>pp</code> function.
        Here’s an example of one such module that pretty-prints a
        custom hash-table with the <code>Depths</code> module,
        where <code>type t</code>… <code>[@@deriving show]</code>
        refers to the <code>Resolver.t</code> type:</p>
        <div class="org-src-container">
          <pre class="src src-ocaml"><span style=
          "color: #f5deb3; font-weight: bold;">module</span> <span style=
          "color: #ECCC87;">Depths</span> = <span style=
          "color: #f5deb3; font-weight: bold;">struct</span>
  <span style=
"color: #f5deb3; font-weight: bold;">type</span> <span style=
"color: #ECCC87;">t</span> = (string, int) <span style=
"color: #ECCC87;">Hashtbl.</span>t

  <span style=
"color: #f5deb3; font-weight: bold;">let</span> <span style=
"color: #8EBCBB;">pp</span> <span style=
"color: #dac6d6;">ppf</span> <span style=
"color: #dac6d6;">values</span> =
    <span style=
"color: #ECCC87;">Caml.Format.</span>open_hovbox <span style=
"color: #B58DAE; font-weight: bold;">1</span>;
    <span style="color: #ECCC87;">Caml.Format.</span>print_cut ();
    <span style="color: #80A0C2;">if</span> <span style=
"color: #ECCC87;">Hashtbl.</span>length values = <span style=
"color: #B58DAE; font-weight: bold;">0</span>
    <span style="color: #80A0C2;">then</span> <span style=
"color: #ECCC87;">Caml.Format.</span>fprintf ppf <span style=
"color: #A2BF8A;">"@[&lt;hov 2&gt;{}@]"</span>
    <span style="color: #80A0C2;">else</span> (
      <span style=
"color: #ECCC87;">Caml.Format.</span>fprintf ppf <span style=
"color: #A2BF8A;">"@[&lt;hov 1&gt;{@ @]"</span>;
      <span style=
"color: #ECCC87;">Hashtbl.</span>iteri values <span style=
"color: #B58DAE;">~f</span>:(<span style=
"color: #80A0C2;">fun</span> ~<span style=
"color: #dac6d6;">key</span> ~<span style=
"color: #dac6d6;">data</span> -&gt;
          <span style=
"color: #ECCC87;">Caml.Format.</span>fprintf ppf <span style=
"color: #A2BF8A;">"@[&lt;hov 2&gt;%s: %d,@ @]"</span> key data);
      <span style=
"color: #ECCC87;">Caml.Format.</span>fprintf ppf <span style=
"color: #A2BF8A;">"@[&lt;hov 1&gt;}@]"</span>);
    <span style="color: #ECCC87;">Caml.Format.</span>close_box ()
  <span style="color: #ff4500;">;;</span>
<span style="color: #f5deb3; font-weight: bold;">end</span>

<span style=
"color: #f5deb3; font-weight: bold;">type</span> <span style=
"color: #ECCC87;">t</span> =
  { statements : <span style=
"color: #ECCC87;">Parser.</span>statement list
  ; scopes : <span style="color: #ECCC87;">Scopes.</span>t
  ; depths : <span style="color: #ECCC87;">Depths.</span>t
  ; parsed_statements : <span style=
"color: #ECCC87;">Parser.</span>statement list
  }
<span style=
"color: #80A0C2; font-weight: bold;">[@@deriving show]</span>
</pre>
        </div>
        <p>Here are the corresponding lines in
        <code>.ocamlinit</code> which tell <code>utop</code> which
        types to pretty-print (the above code is from a file called
        <code>resolver.ml</code>):</p>
        <div class="org-src-container">
          <pre class="src src-ocaml"><span style=
          "color: #778899;">#install_printer</span> <span style=
          "color: #ECCC87;">Resolver.</span>pp<span style=
          "color: #ff4500;">;;</span>
<span style="color: #778899;">#install_printer</span> <span style=
"color: #ECCC87;">Resolver.Depths.</span>pp<span style=
"color: #ff4500;">;;</span>
</pre>
        </div>
        <p>Now <code>utop</code> knows to call the respective
        <code>pp</code> function whenever it needs to print type
        information for the corresponding module. I needed to write
        the custom <code>Depths.pp</code> function by hand since
        <code>ppx_deriving.show</code> is not powerful enough to
        work for all custom types. This is one drawback of strong
        static type systems.</p>
      </div>
    </div>
    <div id="outline-container-orga7aacf2" class="outline-2">
      <h2 id="orga7aacf2">Tracing function execution</h2>
      <div class="outline-text-2" id="text-orga7aacf2">
        <p>Say you want to now debug the <code>resolve</code>
        function in your <code>Resolver</code> module, but the
        return value of <code>resolve</code> is of type
        <code>Resolver.t</code>. If you didn’t have the
        <code>[@@deriving show]</code> <code>ppx</code> annotation
        on <code>type t</code> and didn’t write the custom
        <code>Scopes.pp</code> and <code>Depths.pp</code>
        functions, this would be part of the output of tracing a
        call to <code>Resolver.resolve</code> in <code>utop</code>
        (I cut off the rest of the output since it wasn’t
        important):</p>
        <div class="org-src-container">
          <pre class="src src-ocaml">utop[<span style=
          "color: #B58DAE; font-weight: bold;">1</span>]&gt; #trace <span style="color: #ECCC87;">Resolver.</span>resolve<span style="color: #ff4500;">;;</span>
<span style=
"color: #ECCC87;">Resolver.</span>resolve is now traced.
utop[<span style=
"color: #B58DAE; font-weight: bold;">2</span>]&gt; <span style=
"color: #ECCC87;">Scanner.</span>make_scanner <span style=
"color: #A2BF8A;">"var x = 1; { var y = 2; }"</span>
<span style="color: #f0e68c;">|&gt;</span> <span style=
"color: #ECCC87;">Scanner.</span>scan_tokens
<span style="color: #f0e68c;">|&gt;</span> <span style=
"color: #ECCC87;">Parser.</span>make_parser
<span style="color: #f0e68c;">|&gt;</span> <span style=
"color: #ECCC87;">Parser.</span>parse
<span style="color: #f0e68c;">|&gt;</span> <span style=
"color: #ECCC87;">Resolver.</span>make_resolver
<span style="color: #f0e68c;">|&gt;</span> <span style=
"color: #ECCC87;">Resolver.</span>resolve<span style=
"color: #ff4500;">;;</span>
<span style="color: #ECCC87;">Resolver.</span>resolve &lt;--
  {<span style="color: #ECCC87;">Resolver.</span>statements =
    [<span style="color: #ECCC87;">Parser.</span><span style=
"color: #ECEFF4; background-color: #272C36;">VarDeclaration</span>
      {<span style="color: #ECCC87;">Parser.</span>name =
        {<span style=
"color: #ECCC87;">Scanner.</span>token_type = <span style=
"color: #ECCC87;">Scanner.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Identifier</span>; lexeme = <span style="color: #A2BF8A;">"x"</span>;
         literal = <span style=
"color: #ECCC87;">Value.</span><span style=
"color: #ECEFF4; background-color: #272C36;">LoxNil</span>; line = <span style="color: #B58DAE; font-weight: bold;">1</span>};
       init =
        <span style="color: #ECCC87;">Parser.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Literal</span>
         {<span style="color: #ECCC87;">Parser.</span>token =
           {<span style=
"color: #ECCC87;">Scanner.</span>token_type = <span style=
"color: #ECCC87;">Scanner.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Number</span>; lexeme = <span style="color: #A2BF8A;">"1"</span>;
            literal = <span style=
"color: #ECCC87;">Value.</span><span style=
"color: #ECEFF4; background-color: #272C36;">LoxNumber</span> <span style="color: #B58DAE; font-weight: bold;">1</span>.; line = <span style="color: #B58DAE; font-weight: bold;">1</span>};
          value = <span style=
"color: #ECCC87;">Value.</span><span style=
"color: #ECEFF4; background-color: #272C36;">LoxNumber</span> <span style="color: #B58DAE; font-weight: bold;">1</span>.}};
     <span style="color: #ECCC87;">Parser.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Block</span>
      [<span style="color: #ECCC87;">Parser.</span><span style=
"color: #ECEFF4; background-color: #272C36;">VarDeclaration</span>
        {<span style="color: #ECCC87;">Parser.</span>name =
          {<span style=
"color: #ECCC87;">Scanner.</span>token_type = <span style=
"color: #ECCC87;">Scanner.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Identifier</span>; lexeme = <span style="color: #A2BF8A;">"y"</span>;
           literal = <span style=
"color: #ECCC87;">Value.</span><span style=
"color: #ECEFF4; background-color: #272C36;">LoxNil</span>; line = <span style="color: #B58DAE; font-weight: bold;">1</span>};
         init =
          <span style="color: #ECCC87;">Parser.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Literal</span>
           {<span style="color: #ECCC87;">Parser.</span>token =
             {<span style=
"color: #ECCC87;">Scanner.</span>token_type = <span style=
"color: #ECCC87;">Scanner.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Number</span>; lexeme = <span style="color: #A2BF8A;">"2"</span>;
              literal = <span style=
"color: #ECCC87;">Value.</span><span style=
"color: #ECEFF4; background-color: #272C36;">LoxNumber</span> <span style="color: #B58DAE; font-weight: bold;">2</span>.; line = <span style="color: #B58DAE; font-weight: bold;">1</span>};
            value = <span style=
"color: #ECCC87;">Value.</span><span style=
"color: #ECEFF4; background-color: #272C36;">LoxNumber</span> <span style="color: #B58DAE; font-weight: bold;">2</span>.}}]];
   scopes = &lt;abstr&gt;; depths = &lt;abstr&gt;;
</pre>
        </div>
        <p>Notice this last line: <code>scopes = &lt;abstr&gt;;
        depths = &lt;abstr&gt;;</code>. The
        <code>&lt;abstr&gt;</code> value indicates that OCaml does
        not know how to print values of the <code>Scopes.t</code>
        or <code>Depths.t</code> type since there are no dedicated
        <code>pp</code> functions for those types.</p>
        <p>Once I added the <code>[@@deriving show]</code>
        annotation back to <code>type t</code>, wrote the
        <code>Scopes.pp</code> and <code>Depths.pp</code>
        functions, and added the relevant
        <code>#install_printer</code> lines to
        <code>.ocamlinit</code>, this was the full output of the
        same trace to <code>Resolver.resolve</code>:</p>
        <div class="org-src-container">
          <pre class="src src-ocaml">utop[<span style=
          "color: #B58DAE; font-weight: bold;">1</span>]&gt; #trace <span style="color: #ECCC87;">Resolver.</span>resolve<span style="color: #ff4500;">;;</span>
<span style=
"color: #ECCC87;">Resolver.</span>resolve is now traced.
utop[<span style=
"color: #B58DAE; font-weight: bold;">2</span>]&gt; <span style=
"color: #ECCC87;">Scanner.</span>make_scanner <span style=
"color: #A2BF8A;">"var x = 1; { var y = 2; }"</span>
<span style="color: #f0e68c;">|&gt;</span> <span style=
"color: #ECCC87;">Scanner.</span>scan_tokens
<span style="color: #f0e68c;">|&gt;</span> <span style=
"color: #ECCC87;">Parser.</span>make_parser
<span style="color: #f0e68c;">|&gt;</span> <span style=
"color: #ECCC87;">Parser.</span>parse
<span style="color: #f0e68c;">|&gt;</span> <span style=
"color: #ECCC87;">Resolver.</span>make_resolver
<span style="color: #f0e68c;">|&gt;</span> <span style=
"color: #ECCC87;">Resolver.</span>resolve<span style=
"color: #ff4500;">;;</span>
<span style="color: #ECCC87;">Resolver.</span>resolve &lt;--
  { <span style=
"color: #ECCC87;">Resolver.Resolver.</span>statements =
    [(<span style=
"color: #ECCC87;">Parser.Parser.</span><span style=
"color: #ECEFF4; background-color: #272C36;">VarDeclaration</span>
        { <span style="color: #ECCC87;">Parser.Parser.</span>name =
          { <span style=
"color: #ECCC87;">Scanner.Scanner.</span>token_type = <span style=
"color: #ECCC87;">Scanner.Scanner.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Identifier</span>;
            lexeme = <span style=
"color: #A2BF8A;">"x"</span>; literal = <span style=
"color: #ECCC87;">Value.Value.</span><span style=
"color: #ECEFF4; background-color: #272C36;">LoxNil</span>; line = <span style="color: #B58DAE; font-weight: bold;">1</span> };
          init =
          (<span style=
"color: #ECCC87;">Parser.Parser.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Literal</span>
             { <span style=
"color: #ECCC87;">Parser.Parser.</span>token =
               { <span style=
"color: #ECCC87;">Scanner.Scanner.</span>token_type = <span style=
"color: #ECCC87;">Scanner.Scanner.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Number</span>;
                 lexeme = <span style=
"color: #A2BF8A;">"1"</span>; literal = (<span style=
"color: #ECCC87;">Value.Value.</span><span style=
"color: #ECEFF4; background-color: #272C36;">LoxNumber</span> <span style="color: #B58DAE; font-weight: bold;">1</span>.);
                 line = <span style=
"color: #B58DAE; font-weight: bold;">1</span> };
               value = (<span style=
"color: #ECCC87;">Value.Value.</span><span style=
"color: #ECEFF4; background-color: #272C36;">LoxNumber</span> <span style="color: #B58DAE; font-weight: bold;">1</span>.) })
          });
      (<span style=
"color: #ECCC87;">Parser.Parser.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Block</span>
         [(<span style=
"color: #ECCC87;">Parser.Parser.</span><span style=
"color: #ECEFF4; background-color: #272C36;">VarDeclaration</span>
             { <span style=
"color: #ECCC87;">Parser.Parser.</span>name =
               { <span style=
"color: #ECCC87;">Scanner.Scanner.</span>token_type = <span style=
"color: #ECCC87;">Scanner.Scanner.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Identifier</span>;
                 lexeme = <span style=
"color: #A2BF8A;">"y"</span>; literal = <span style=
"color: #ECCC87;">Value.Value.</span><span style=
"color: #ECEFF4; background-color: #272C36;">LoxNil</span>; line = <span style="color: #B58DAE; font-weight: bold;">1</span> };
               init =
               (<span style=
"color: #ECCC87;">Parser.Parser.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Literal</span>
                  { <span style=
"color: #ECCC87;">Parser.Parser.</span>token =
                    { <span style=
"color: #ECCC87;">Scanner.Scanner.</span>token_type = <span style=
"color: #ECCC87;">Scanner.Scanner.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Number</span>;
                      lexeme = <span style=
"color: #A2BF8A;">"2"</span>; literal = (<span style=
"color: #ECCC87;">Value.Value.</span><span style=
"color: #ECEFF4; background-color: #272C36;">LoxNumber</span> <span style="color: #B58DAE; font-weight: bold;">2</span>.);
                      line = <span style=
"color: #B58DAE; font-weight: bold;">1</span> };
                    value = (<span style=
"color: #ECCC87;">Value.Value.</span><span style=
"color: #ECEFF4; background-color: #272C36;">LoxNumber</span> <span style="color: #B58DAE; font-weight: bold;">2</span>.) })
               })
           ])
      ];
    scopes = {}; depths = {};
    parsed_statements =
    [(<span style=
"color: #ECCC87;">Parser.Parser.</span><span style=
"color: #ECEFF4; background-color: #272C36;">VarDeclaration</span>
        { <span style="color: #ECCC87;">Parser.Parser.</span>name =
          { <span style=
"color: #ECCC87;">Scanner.Scanner.</span>token_type = <span style=
"color: #ECCC87;">Scanner.Scanner.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Identifier</span>;
            lexeme = <span style=
"color: #A2BF8A;">"x"</span>; literal = <span style=
"color: #ECCC87;">Value.Value.</span><span style=
"color: #ECEFF4; background-color: #272C36;">LoxNil</span>; line = <span style="color: #B58DAE; font-weight: bold;">1</span> };
          init =
          (<span style=
"color: #ECCC87;">Parser.Parser.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Literal</span>
             { <span style=
"color: #ECCC87;">Parser.Parser.</span>token =
               { <span style=
"color: #ECCC87;">Scanner.Scanner.</span>token_type = <span style=
"color: #ECCC87;">Scanner.Scanner.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Number</span>;
                 lexeme = <span style=
"color: #A2BF8A;">"1"</span>; literal = (<span style=
"color: #ECCC87;">Value.Value.</span><span style=
"color: #ECEFF4; background-color: #272C36;">LoxNumber</span> <span style="color: #B58DAE; font-weight: bold;">1</span>.);
                 line = <span style=
"color: #B58DAE; font-weight: bold;">1</span> };
               value = (<span style=
"color: #ECCC87;">Value.Value.</span><span style=
"color: #ECEFF4; background-color: #272C36;">LoxNumber</span> <span style="color: #B58DAE; font-weight: bold;">1</span>.) })
          });
      (<span style=
"color: #ECCC87;">Parser.Parser.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Block</span>
         [(<span style=
"color: #ECCC87;">Parser.Parser.</span><span style=
"color: #ECEFF4; background-color: #272C36;">VarDeclaration</span>
             { <span style=
"color: #ECCC87;">Parser.Parser.</span>name =
               { <span style=
"color: #ECCC87;">Scanner.Scanner.</span>token_type = <span style=
"color: #ECCC87;">Scanner.Scanner.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Identifier</span>;
                 lexeme = <span style=
"color: #A2BF8A;">"y"</span>; literal = <span style=
"color: #ECCC87;">Value.Value.</span><span style=
"color: #ECEFF4; background-color: #272C36;">LoxNil</span>; line = <span style="color: #B58DAE; font-weight: bold;">1</span> };
               init =
               (<span style=
"color: #ECCC87;">Parser.Parser.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Literal</span>
                  { <span style=
"color: #ECCC87;">Parser.Parser.</span>token =
                    { <span style=
"color: #ECCC87;">Scanner.Scanner.</span>token_type = <span style=
"color: #ECCC87;">Scanner.Scanner.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Number</span>;
                      lexeme = <span style=
"color: #A2BF8A;">"2"</span>; literal = (<span style=
"color: #ECCC87;">Value.Value.</span><span style=
"color: #ECEFF4; background-color: #272C36;">LoxNumber</span> <span style="color: #B58DAE; font-weight: bold;">2</span>.);
                      line = <span style=
"color: #B58DAE; font-weight: bold;">1</span> };
                    value = (<span style=
"color: #ECCC87;">Value.Value.</span><span style=
"color: #ECEFF4; background-color: #272C36;">LoxNumber</span> <span style="color: #B58DAE; font-weight: bold;">2</span>.) })
               })
           ])
      ]
    }
<span style="color: #ECCC87;">Resolver.</span>resolve &lt;--
  { <span style=
"color: #ECCC87;">Resolver.Resolver.</span>statements =
    [(<span style=
"color: #ECCC87;">Parser.Parser.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Expression</span>
        (<span style=
"color: #ECCC87;">Parser.Parser.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Literal</span>
           { <span style=
"color: #ECCC87;">Parser.Parser.</span>token =
             { <span style=
"color: #ECCC87;">Scanner.Scanner.</span>token_type = <span style=
"color: #ECCC87;">Scanner.Scanner.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Number</span>;
               lexeme = <span style=
"color: #A2BF8A;">"1"</span>; literal = (<span style=
"color: #ECCC87;">Value.Value.</span><span style=
"color: #ECEFF4; background-color: #272C36;">LoxNumber</span> <span style="color: #B58DAE; font-weight: bold;">1</span>.); line = <span style="color: #B58DAE; font-weight: bold;">1</span> };
             value = (<span style=
"color: #ECCC87;">Value.Value.</span><span style=
"color: #ECEFF4; background-color: #272C36;">LoxNumber</span> <span style="color: #B58DAE; font-weight: bold;">1</span>.) }))
      ];
    scopes = {}; depths = {};
    parsed_statements =
    [(<span style=
"color: #ECCC87;">Parser.Parser.</span><span style=
"color: #ECEFF4; background-color: #272C36;">VarDeclaration</span>
        { <span style="color: #ECCC87;">Parser.Parser.</span>name =
          { <span style=
"color: #ECCC87;">Scanner.Scanner.</span>token_type = <span style=
"color: #ECCC87;">Scanner.Scanner.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Identifier</span>;
            lexeme = <span style=
"color: #A2BF8A;">"x"</span>; literal = <span style=
"color: #ECCC87;">Value.Value.</span><span style=
"color: #ECEFF4; background-color: #272C36;">LoxNil</span>; line = <span style="color: #B58DAE; font-weight: bold;">1</span> };
          init =
          (<span style=
"color: #ECCC87;">Parser.Parser.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Literal</span>
             { <span style=
"color: #ECCC87;">Parser.Parser.</span>token =
               { <span style=
"color: #ECCC87;">Scanner.Scanner.</span>token_type = <span style=
"color: #ECCC87;">Scanner.Scanner.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Number</span>;
                 lexeme = <span style=
"color: #A2BF8A;">"1"</span>; literal = (<span style=
"color: #ECCC87;">Value.Value.</span><span style=
"color: #ECEFF4; background-color: #272C36;">LoxNumber</span> <span style="color: #B58DAE; font-weight: bold;">1</span>.);
                 line = <span style=
"color: #B58DAE; font-weight: bold;">1</span> };
               value = (<span style=
"color: #ECCC87;">Value.Value.</span><span style=
"color: #ECEFF4; background-color: #272C36;">LoxNumber</span> <span style="color: #B58DAE; font-weight: bold;">1</span>.) })
          });
      (<span style=
"color: #ECCC87;">Parser.Parser.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Block</span>
         [(<span style=
"color: #ECCC87;">Parser.Parser.</span><span style=
"color: #ECEFF4; background-color: #272C36;">VarDeclaration</span>
             { <span style=
"color: #ECCC87;">Parser.Parser.</span>name =
               { <span style=
"color: #ECCC87;">Scanner.Scanner.</span>token_type = <span style=
"color: #ECCC87;">Scanner.Scanner.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Identifier</span>;
                 lexeme = <span style=
"color: #A2BF8A;">"y"</span>; literal = <span style=
"color: #ECCC87;">Value.Value.</span><span style=
"color: #ECEFF4; background-color: #272C36;">LoxNil</span>; line = <span style="color: #B58DAE; font-weight: bold;">1</span> };
               init =
               (<span style=
"color: #ECCC87;">Parser.Parser.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Literal</span>
                  { <span style=
"color: #ECCC87;">Parser.Parser.</span>token =
                    { <span style=
"color: #ECCC87;">Scanner.Scanner.</span>token_type = <span style=
"color: #ECCC87;">Scanner.Scanner.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Number</span>;
                      lexeme = <span style=
"color: #A2BF8A;">"2"</span>; literal = (<span style=
"color: #ECCC87;">Value.Value.</span><span style=
"color: #ECEFF4; background-color: #272C36;">LoxNumber</span> <span style="color: #B58DAE; font-weight: bold;">2</span>.);
                      line = <span style=
"color: #B58DAE; font-weight: bold;">1</span> };
                    value = (<span style=
"color: #ECCC87;">Value.Value.</span><span style=
"color: #ECEFF4; background-color: #272C36;">LoxNumber</span> <span style="color: #B58DAE; font-weight: bold;">2</span>.) })
               })
           ])
      ]
    }
<span style="color: #ECCC87;">Resolver.</span>resolve --&gt;
  { <span style=
"color: #ECCC87;">Resolver.Resolver.</span>statements =
    [(<span style=
"color: #ECCC87;">Parser.Parser.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Expression</span>
        (<span style=
"color: #ECCC87;">Parser.Parser.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Literal</span>
           { <span style=
"color: #ECCC87;">Parser.Parser.</span>token =
             { <span style=
"color: #ECCC87;">Scanner.Scanner.</span>token_type = <span style=
"color: #ECCC87;">Scanner.Scanner.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Number</span>;
               lexeme = <span style=
"color: #A2BF8A;">"1"</span>; literal = (<span style=
"color: #ECCC87;">Value.Value.</span><span style=
"color: #ECEFF4; background-color: #272C36;">LoxNumber</span> <span style="color: #B58DAE; font-weight: bold;">1</span>.); line = <span style="color: #B58DAE; font-weight: bold;">1</span> };
             value = (<span style=
"color: #ECCC87;">Value.Value.</span><span style=
"color: #ECEFF4; background-color: #272C36;">LoxNumber</span> <span style="color: #B58DAE; font-weight: bold;">1</span>.) }))
      ];
    scopes = {}; depths = {};
    parsed_statements =
    [(<span style=
"color: #ECCC87;">Parser.Parser.</span><span style=
"color: #ECEFF4; background-color: #272C36;">VarDeclaration</span>
        { <span style="color: #ECCC87;">Parser.Parser.</span>name =
          { <span style=
"color: #ECCC87;">Scanner.Scanner.</span>token_type = <span style=
"color: #ECCC87;">Scanner.Scanner.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Identifier</span>;
            lexeme = <span style=
"color: #A2BF8A;">"x"</span>; literal = <span style=
"color: #ECCC87;">Value.Value.</span><span style=
"color: #ECEFF4; background-color: #272C36;">LoxNil</span>; line = <span style="color: #B58DAE; font-weight: bold;">1</span> };
          init =
          (<span style=
"color: #ECCC87;">Parser.Parser.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Literal</span>
             { <span style=
"color: #ECCC87;">Parser.Parser.</span>token =
               { <span style=
"color: #ECCC87;">Scanner.Scanner.</span>token_type = <span style=
"color: #ECCC87;">Scanner.Scanner.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Number</span>;
                 lexeme = <span style=
"color: #A2BF8A;">"1"</span>; literal = (<span style=
"color: #ECCC87;">Value.Value.</span><span style=
"color: #ECEFF4; background-color: #272C36;">LoxNumber</span> <span style="color: #B58DAE; font-weight: bold;">1</span>.);
                 line = <span style=
"color: #B58DAE; font-weight: bold;">1</span> };
               value = (<span style=
"color: #ECCC87;">Value.Value.</span><span style=
"color: #ECEFF4; background-color: #272C36;">LoxNumber</span> <span style="color: #B58DAE; font-weight: bold;">1</span>.) })
          });
      (<span style=
"color: #ECCC87;">Parser.Parser.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Block</span>
         [(<span style=
"color: #ECCC87;">Parser.Parser.</span><span style=
"color: #ECEFF4; background-color: #272C36;">VarDeclaration</span>
             { <span style=
"color: #ECCC87;">Parser.Parser.</span>name =
               { <span style=
"color: #ECCC87;">Scanner.Scanner.</span>token_type = <span style=
"color: #ECCC87;">Scanner.Scanner.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Identifier</span>;
                 lexeme = <span style=
"color: #A2BF8A;">"y"</span>; literal = <span style=
"color: #ECCC87;">Value.Value.</span><span style=
"color: #ECEFF4; background-color: #272C36;">LoxNil</span>; line = <span style="color: #B58DAE; font-weight: bold;">1</span> };
               init =
               (<span style=
"color: #ECCC87;">Parser.Parser.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Literal</span>
                  { <span style=
"color: #ECCC87;">Parser.Parser.</span>token =
                    { <span style=
"color: #ECCC87;">Scanner.Scanner.</span>token_type = <span style=
"color: #ECCC87;">Scanner.Scanner.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Number</span>;
                      lexeme = <span style=
"color: #A2BF8A;">"2"</span>; literal = (<span style=
"color: #ECCC87;">Value.Value.</span><span style=
"color: #ECEFF4; background-color: #272C36;">LoxNumber</span> <span style="color: #B58DAE; font-weight: bold;">2</span>.);
                      line = <span style=
"color: #B58DAE; font-weight: bold;">1</span> };
                    value = (<span style=
"color: #ECCC87;">Value.Value.</span><span style=
"color: #ECEFF4; background-color: #272C36;">LoxNumber</span> <span style="color: #B58DAE; font-weight: bold;">2</span>.) })
               })
           ])
      ]
    }
<span style="color: #ECCC87;">Resolver.</span>resolve &lt;--
  { <span style=
"color: #ECCC87;">Resolver.Resolver.</span>statements =
    [(<span style=
"color: #ECCC87;">Parser.Parser.</span><span style=
"color: #ECEFF4; background-color: #272C36;">VarDeclaration</span>
        { <span style="color: #ECCC87;">Parser.Parser.</span>name =
          { <span style=
"color: #ECCC87;">Scanner.Scanner.</span>token_type = <span style=
"color: #ECCC87;">Scanner.Scanner.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Identifier</span>;
            lexeme = <span style=
"color: #A2BF8A;">"y"</span>; literal = <span style=
"color: #ECCC87;">Value.Value.</span><span style=
"color: #ECEFF4; background-color: #272C36;">LoxNil</span>; line = <span style="color: #B58DAE; font-weight: bold;">1</span> };
          init =
          (<span style=
"color: #ECCC87;">Parser.Parser.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Literal</span>
             { <span style=
"color: #ECCC87;">Parser.Parser.</span>token =
               { <span style=
"color: #ECCC87;">Scanner.Scanner.</span>token_type = <span style=
"color: #ECCC87;">Scanner.Scanner.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Number</span>;
                 lexeme = <span style=
"color: #A2BF8A;">"2"</span>; literal = (<span style=
"color: #ECCC87;">Value.Value.</span><span style=
"color: #ECEFF4; background-color: #272C36;">LoxNumber</span> <span style="color: #B58DAE; font-weight: bold;">2</span>.);
                 line = <span style=
"color: #B58DAE; font-weight: bold;">1</span> };
               value = (<span style=
"color: #ECCC87;">Value.Value.</span><span style=
"color: #ECEFF4; background-color: #272C36;">LoxNumber</span> <span style="color: #B58DAE; font-weight: bold;">2</span>.) })
          })
      ];
    scopes = {}; depths = {};
    parsed_statements =
    [(<span style=
"color: #ECCC87;">Parser.Parser.</span><span style=
"color: #ECEFF4; background-color: #272C36;">VarDeclaration</span>
        { <span style="color: #ECCC87;">Parser.Parser.</span>name =
          { <span style=
"color: #ECCC87;">Scanner.Scanner.</span>token_type = <span style=
"color: #ECCC87;">Scanner.Scanner.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Identifier</span>;
            lexeme = <span style=
"color: #A2BF8A;">"x"</span>; literal = <span style=
"color: #ECCC87;">Value.Value.</span><span style=
"color: #ECEFF4; background-color: #272C36;">LoxNil</span>; line = <span style="color: #B58DAE; font-weight: bold;">1</span> };
          init =
          (<span style=
"color: #ECCC87;">Parser.Parser.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Literal</span>
             { <span style=
"color: #ECCC87;">Parser.Parser.</span>token =
               { <span style=
"color: #ECCC87;">Scanner.Scanner.</span>token_type = <span style=
"color: #ECCC87;">Scanner.Scanner.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Number</span>;
                 lexeme = <span style=
"color: #A2BF8A;">"1"</span>; literal = (<span style=
"color: #ECCC87;">Value.Value.</span><span style=
"color: #ECEFF4; background-color: #272C36;">LoxNumber</span> <span style="color: #B58DAE; font-weight: bold;">1</span>.);
                 line = <span style=
"color: #B58DAE; font-weight: bold;">1</span> };
               value = (<span style=
"color: #ECCC87;">Value.Value.</span><span style=
"color: #ECEFF4; background-color: #272C36;">LoxNumber</span> <span style="color: #B58DAE; font-weight: bold;">1</span>.) })
          });
      (<span style=
"color: #ECCC87;">Parser.Parser.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Block</span>
         [(<span style=
"color: #ECCC87;">Parser.Parser.</span><span style=
"color: #ECEFF4; background-color: #272C36;">VarDeclaration</span>
             { <span style=
"color: #ECCC87;">Parser.Parser.</span>name =
               { <span style=
"color: #ECCC87;">Scanner.Scanner.</span>token_type = <span style=
"color: #ECCC87;">Scanner.Scanner.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Identifier</span>;
                 lexeme = <span style=
"color: #A2BF8A;">"y"</span>; literal = <span style=
"color: #ECCC87;">Value.Value.</span><span style=
"color: #ECEFF4; background-color: #272C36;">LoxNil</span>; line = <span style="color: #B58DAE; font-weight: bold;">1</span> };
               init =
               (<span style=
"color: #ECCC87;">Parser.Parser.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Literal</span>
                  { <span style=
"color: #ECCC87;">Parser.Parser.</span>token =
                    { <span style=
"color: #ECCC87;">Scanner.Scanner.</span>token_type = <span style=
"color: #ECCC87;">Scanner.Scanner.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Number</span>;
                      lexeme = <span style=
"color: #A2BF8A;">"2"</span>; literal = (<span style=
"color: #ECCC87;">Value.Value.</span><span style=
"color: #ECEFF4; background-color: #272C36;">LoxNumber</span> <span style="color: #B58DAE; font-weight: bold;">2</span>.);
                      line = <span style=
"color: #B58DAE; font-weight: bold;">1</span> };
                    value = (<span style=
"color: #ECCC87;">Value.Value.</span><span style=
"color: #ECEFF4; background-color: #272C36;">LoxNumber</span> <span style="color: #B58DAE; font-weight: bold;">2</span>.) })
               })
           ])
      ]
    }
<span style="color: #ECCC87;">Resolver.</span>resolve &lt;--
  { <span style=
"color: #ECCC87;">Resolver.Resolver.</span>statements =
    [(<span style=
"color: #ECCC87;">Parser.Parser.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Expression</span>
        (<span style=
"color: #ECCC87;">Parser.Parser.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Literal</span>
           { <span style=
"color: #ECCC87;">Parser.Parser.</span>token =
             { <span style=
"color: #ECCC87;">Scanner.Scanner.</span>token_type = <span style=
"color: #ECCC87;">Scanner.Scanner.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Number</span>;
               lexeme = <span style=
"color: #A2BF8A;">"2"</span>; literal = (<span style=
"color: #ECCC87;">Value.Value.</span><span style=
"color: #ECEFF4; background-color: #272C36;">LoxNumber</span> <span style="color: #B58DAE; font-weight: bold;">2</span>.); line = <span style="color: #B58DAE; font-weight: bold;">1</span> };
             value = (<span style=
"color: #ECCC87;">Value.Value.</span><span style=
"color: #ECEFF4; background-color: #272C36;">LoxNumber</span> <span style="color: #B58DAE; font-weight: bold;">2</span>.) }))
      ];
    scopes = { y: declared, }; depths = {};
    parsed_statements =
    [(<span style=
"color: #ECCC87;">Parser.Parser.</span><span style=
"color: #ECEFF4; background-color: #272C36;">VarDeclaration</span>
        { <span style="color: #ECCC87;">Parser.Parser.</span>name =
          { <span style=
"color: #ECCC87;">Scanner.Scanner.</span>token_type = <span style=
"color: #ECCC87;">Scanner.Scanner.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Identifier</span>;
            lexeme = <span style=
"color: #A2BF8A;">"x"</span>; literal = <span style=
"color: #ECCC87;">Value.Value.</span><span style=
"color: #ECEFF4; background-color: #272C36;">LoxNil</span>; line = <span style="color: #B58DAE; font-weight: bold;">1</span> };
          init =
          (<span style=
"color: #ECCC87;">Parser.Parser.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Literal</span>
             { <span style=
"color: #ECCC87;">Parser.Parser.</span>token =
               { <span style=
"color: #ECCC87;">Scanner.Scanner.</span>token_type = <span style=
"color: #ECCC87;">Scanner.Scanner.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Number</span>;
                 lexeme = <span style=
"color: #A2BF8A;">"1"</span>; literal = (<span style=
"color: #ECCC87;">Value.Value.</span><span style=
"color: #ECEFF4; background-color: #272C36;">LoxNumber</span> <span style="color: #B58DAE; font-weight: bold;">1</span>.);
                 line = <span style=
"color: #B58DAE; font-weight: bold;">1</span> };
               value = (<span style=
"color: #ECCC87;">Value.Value.</span><span style=
"color: #ECEFF4; background-color: #272C36;">LoxNumber</span> <span style="color: #B58DAE; font-weight: bold;">1</span>.) })
          });
      (<span style=
"color: #ECCC87;">Parser.Parser.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Block</span>
         [(<span style=
"color: #ECCC87;">Parser.Parser.</span><span style=
"color: #ECEFF4; background-color: #272C36;">VarDeclaration</span>
             { <span style=
"color: #ECCC87;">Parser.Parser.</span>name =
               { <span style=
"color: #ECCC87;">Scanner.Scanner.</span>token_type = <span style=
"color: #ECCC87;">Scanner.Scanner.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Identifier</span>;
                 lexeme = <span style=
"color: #A2BF8A;">"y"</span>; literal = <span style=
"color: #ECCC87;">Value.Value.</span><span style=
"color: #ECEFF4; background-color: #272C36;">LoxNil</span>; line = <span style="color: #B58DAE; font-weight: bold;">1</span> };
               init =
               (<span style=
"color: #ECCC87;">Parser.Parser.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Literal</span>
                  { <span style=
"color: #ECCC87;">Parser.Parser.</span>token =
                    { <span style=
"color: #ECCC87;">Scanner.Scanner.</span>token_type = <span style=
"color: #ECCC87;">Scanner.Scanner.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Number</span>;
                      lexeme = <span style=
"color: #A2BF8A;">"2"</span>; literal = (<span style=
"color: #ECCC87;">Value.Value.</span><span style=
"color: #ECEFF4; background-color: #272C36;">LoxNumber</span> <span style="color: #B58DAE; font-weight: bold;">2</span>.);
                      line = <span style=
"color: #B58DAE; font-weight: bold;">1</span> };
                    value = (<span style=
"color: #ECCC87;">Value.Value.</span><span style=
"color: #ECEFF4; background-color: #272C36;">LoxNumber</span> <span style="color: #B58DAE; font-weight: bold;">2</span>.) })
               })
           ])
      ]
    }
<span style="color: #ECCC87;">Resolver.</span>resolve --&gt;
  { <span style=
"color: #ECCC87;">Resolver.Resolver.</span>statements =
    [(<span style=
"color: #ECCC87;">Parser.Parser.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Expression</span>
        (<span style=
"color: #ECCC87;">Parser.Parser.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Literal</span>
           { <span style=
"color: #ECCC87;">Parser.Parser.</span>token =
             { <span style=
"color: #ECCC87;">Scanner.Scanner.</span>token_type = <span style=
"color: #ECCC87;">Scanner.Scanner.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Number</span>;
               lexeme = <span style=
"color: #A2BF8A;">"2"</span>; literal = (<span style=
"color: #ECCC87;">Value.Value.</span><span style=
"color: #ECEFF4; background-color: #272C36;">LoxNumber</span> <span style="color: #B58DAE; font-weight: bold;">2</span>.); line = <span style="color: #B58DAE; font-weight: bold;">1</span> };
             value = (<span style=
"color: #ECCC87;">Value.Value.</span><span style=
"color: #ECEFF4; background-color: #272C36;">LoxNumber</span> <span style="color: #B58DAE; font-weight: bold;">2</span>.) }))
      ];
    scopes = { y: declared, }; depths = {};
    parsed_statements =
    [(<span style=
"color: #ECCC87;">Parser.Parser.</span><span style=
"color: #ECEFF4; background-color: #272C36;">VarDeclaration</span>
        { <span style="color: #ECCC87;">Parser.Parser.</span>name =
          { <span style=
"color: #ECCC87;">Scanner.Scanner.</span>token_type = <span style=
"color: #ECCC87;">Scanner.Scanner.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Identifier</span>;
            lexeme = <span style=
"color: #A2BF8A;">"x"</span>; literal = <span style=
"color: #ECCC87;">Value.Value.</span><span style=
"color: #ECEFF4; background-color: #272C36;">LoxNil</span>; line = <span style="color: #B58DAE; font-weight: bold;">1</span> };
          init =
          (<span style=
"color: #ECCC87;">Parser.Parser.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Literal</span>
             { <span style=
"color: #ECCC87;">Parser.Parser.</span>token =
               { <span style=
"color: #ECCC87;">Scanner.Scanner.</span>token_type = <span style=
"color: #ECCC87;">Scanner.Scanner.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Number</span>;
                 lexeme = <span style=
"color: #A2BF8A;">"1"</span>; literal = (<span style=
"color: #ECCC87;">Value.Value.</span><span style=
"color: #ECEFF4; background-color: #272C36;">LoxNumber</span> <span style="color: #B58DAE; font-weight: bold;">1</span>.);
                 line = <span style=
"color: #B58DAE; font-weight: bold;">1</span> };
               value = (<span style=
"color: #ECCC87;">Value.Value.</span><span style=
"color: #ECEFF4; background-color: #272C36;">LoxNumber</span> <span style="color: #B58DAE; font-weight: bold;">1</span>.) })
          });
      (<span style=
"color: #ECCC87;">Parser.Parser.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Block</span>
         [(<span style=
"color: #ECCC87;">Parser.Parser.</span><span style=
"color: #ECEFF4; background-color: #272C36;">VarDeclaration</span>
             { <span style=
"color: #ECCC87;">Parser.Parser.</span>name =
               { <span style=
"color: #ECCC87;">Scanner.Scanner.</span>token_type = <span style=
"color: #ECCC87;">Scanner.Scanner.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Identifier</span>;
                 lexeme = <span style=
"color: #A2BF8A;">"y"</span>; literal = <span style=
"color: #ECCC87;">Value.Value.</span><span style=
"color: #ECEFF4; background-color: #272C36;">LoxNil</span>; line = <span style="color: #B58DAE; font-weight: bold;">1</span> };
               init =
               (<span style=
"color: #ECCC87;">Parser.Parser.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Literal</span>
                  { <span style=
"color: #ECCC87;">Parser.Parser.</span>token =
                    { <span style=
"color: #ECCC87;">Scanner.Scanner.</span>token_type = <span style=
"color: #ECCC87;">Scanner.Scanner.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Number</span>;
                      lexeme = <span style=
"color: #A2BF8A;">"2"</span>; literal = (<span style=
"color: #ECCC87;">Value.Value.</span><span style=
"color: #ECEFF4; background-color: #272C36;">LoxNumber</span> <span style="color: #B58DAE; font-weight: bold;">2</span>.);
                      line = <span style=
"color: #B58DAE; font-weight: bold;">1</span> };
                    value = (<span style=
"color: #ECCC87;">Value.Value.</span><span style=
"color: #ECEFF4; background-color: #272C36;">LoxNumber</span> <span style="color: #B58DAE; font-weight: bold;">2</span>.) })
               })
           ])
      ]
    }
<span style="color: #ECCC87;">Resolver.</span>resolve --&gt;
  { <span style=
"color: #ECCC87;">Resolver.Resolver.</span>statements =
    [(<span style=
"color: #ECCC87;">Parser.Parser.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Expression</span>
        (<span style=
"color: #ECCC87;">Parser.Parser.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Literal</span>
           { <span style=
"color: #ECCC87;">Parser.Parser.</span>token =
             { <span style=
"color: #ECCC87;">Scanner.Scanner.</span>token_type = <span style=
"color: #ECCC87;">Scanner.Scanner.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Number</span>;
               lexeme = <span style=
"color: #A2BF8A;">"2"</span>; literal = (<span style=
"color: #ECCC87;">Value.Value.</span><span style=
"color: #ECEFF4; background-color: #272C36;">LoxNumber</span> <span style="color: #B58DAE; font-weight: bold;">2</span>.); line = <span style="color: #B58DAE; font-weight: bold;">1</span> };
             value = (<span style=
"color: #ECCC87;">Value.Value.</span><span style=
"color: #ECEFF4; background-color: #272C36;">LoxNumber</span> <span style="color: #B58DAE; font-weight: bold;">2</span>.) }))
      ];
    scopes = { y: declared, }; depths = {};
    parsed_statements =
    [(<span style=
"color: #ECCC87;">Parser.Parser.</span><span style=
"color: #ECEFF4; background-color: #272C36;">VarDeclaration</span>
        { <span style="color: #ECCC87;">Parser.Parser.</span>name =
          { <span style=
"color: #ECCC87;">Scanner.Scanner.</span>token_type = <span style=
"color: #ECCC87;">Scanner.Scanner.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Identifier</span>;
            lexeme = <span style=
"color: #A2BF8A;">"x"</span>; literal = <span style=
"color: #ECCC87;">Value.Value.</span><span style=
"color: #ECEFF4; background-color: #272C36;">LoxNil</span>; line = <span style="color: #B58DAE; font-weight: bold;">1</span> };
          init =
          (<span style=
"color: #ECCC87;">Parser.Parser.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Literal</span>
             { <span style=
"color: #ECCC87;">Parser.Parser.</span>token =
               { <span style=
"color: #ECCC87;">Scanner.Scanner.</span>token_type = <span style=
"color: #ECCC87;">Scanner.Scanner.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Number</span>;
                 lexeme = <span style=
"color: #A2BF8A;">"1"</span>; literal = (<span style=
"color: #ECCC87;">Value.Value.</span><span style=
"color: #ECEFF4; background-color: #272C36;">LoxNumber</span> <span style="color: #B58DAE; font-weight: bold;">1</span>.);
                 line = <span style=
"color: #B58DAE; font-weight: bold;">1</span> };
               value = (<span style=
"color: #ECCC87;">Value.Value.</span><span style=
"color: #ECEFF4; background-color: #272C36;">LoxNumber</span> <span style="color: #B58DAE; font-weight: bold;">1</span>.) })
          });
      (<span style=
"color: #ECCC87;">Parser.Parser.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Block</span>
         [(<span style=
"color: #ECCC87;">Parser.Parser.</span><span style=
"color: #ECEFF4; background-color: #272C36;">VarDeclaration</span>
             { <span style=
"color: #ECCC87;">Parser.Parser.</span>name =
               { <span style=
"color: #ECCC87;">Scanner.Scanner.</span>token_type = <span style=
"color: #ECCC87;">Scanner.Scanner.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Identifier</span>;
                 lexeme = <span style=
"color: #A2BF8A;">"y"</span>; literal = <span style=
"color: #ECCC87;">Value.Value.</span><span style=
"color: #ECEFF4; background-color: #272C36;">LoxNil</span>; line = <span style="color: #B58DAE; font-weight: bold;">1</span> };
               init =
               (<span style=
"color: #ECCC87;">Parser.Parser.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Literal</span>
                  { <span style=
"color: #ECCC87;">Parser.Parser.</span>token =
                    { <span style=
"color: #ECCC87;">Scanner.Scanner.</span>token_type = <span style=
"color: #ECCC87;">Scanner.Scanner.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Number</span>;
                      lexeme = <span style=
"color: #A2BF8A;">"2"</span>; literal = (<span style=
"color: #ECCC87;">Value.Value.</span><span style=
"color: #ECEFF4; background-color: #272C36;">LoxNumber</span> <span style="color: #B58DAE; font-weight: bold;">2</span>.);
                      line = <span style=
"color: #B58DAE; font-weight: bold;">1</span> };
                    value = (<span style=
"color: #ECCC87;">Value.Value.</span><span style=
"color: #ECEFF4; background-color: #272C36;">LoxNumber</span> <span style="color: #B58DAE; font-weight: bold;">2</span>.) })
               })
           ])
      ]
    }
<span style="color: #ECCC87;">Resolver.</span>resolve &lt;--
  { <span style=
"color: #ECCC87;">Resolver.Resolver.</span>statements =
    [(<span style=
"color: #ECCC87;">Parser.Parser.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Expression</span>
        (<span style=
"color: #ECCC87;">Parser.Parser.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Literal</span>
           { <span style=
"color: #ECCC87;">Parser.Parser.</span>token =
             { <span style=
"color: #ECCC87;">Scanner.Scanner.</span>token_type = <span style=
"color: #ECCC87;">Scanner.Scanner.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Number</span>;
               lexeme = <span style=
"color: #A2BF8A;">"2"</span>; literal = (<span style=
"color: #ECCC87;">Value.Value.</span><span style=
"color: #ECEFF4; background-color: #272C36;">LoxNumber</span> <span style="color: #B58DAE; font-weight: bold;">2</span>.); line = <span style="color: #B58DAE; font-weight: bold;">1</span> };
             value = (<span style=
"color: #ECCC87;">Value.Value.</span><span style=
"color: #ECEFF4; background-color: #272C36;">LoxNumber</span> <span style="color: #B58DAE; font-weight: bold;">2</span>.) }))
      ];
    scopes = {}; depths = {};
    parsed_statements =
    [(<span style=
"color: #ECCC87;">Parser.Parser.</span><span style=
"color: #ECEFF4; background-color: #272C36;">VarDeclaration</span>
        { <span style="color: #ECCC87;">Parser.Parser.</span>name =
          { <span style=
"color: #ECCC87;">Scanner.Scanner.</span>token_type = <span style=
"color: #ECCC87;">Scanner.Scanner.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Identifier</span>;
            lexeme = <span style=
"color: #A2BF8A;">"x"</span>; literal = <span style=
"color: #ECCC87;">Value.Value.</span><span style=
"color: #ECEFF4; background-color: #272C36;">LoxNil</span>; line = <span style="color: #B58DAE; font-weight: bold;">1</span> };
          init =
          (<span style=
"color: #ECCC87;">Parser.Parser.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Literal</span>
             { <span style=
"color: #ECCC87;">Parser.Parser.</span>token =
               { <span style=
"color: #ECCC87;">Scanner.Scanner.</span>token_type = <span style=
"color: #ECCC87;">Scanner.Scanner.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Number</span>;
                 lexeme = <span style=
"color: #A2BF8A;">"1"</span>; literal = (<span style=
"color: #ECCC87;">Value.Value.</span><span style=
"color: #ECEFF4; background-color: #272C36;">LoxNumber</span> <span style="color: #B58DAE; font-weight: bold;">1</span>.);
                 line = <span style=
"color: #B58DAE; font-weight: bold;">1</span> };
               value = (<span style=
"color: #ECCC87;">Value.Value.</span><span style=
"color: #ECEFF4; background-color: #272C36;">LoxNumber</span> <span style="color: #B58DAE; font-weight: bold;">1</span>.) })
          });
      (<span style=
"color: #ECCC87;">Parser.Parser.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Block</span>
         [(<span style=
"color: #ECCC87;">Parser.Parser.</span><span style=
"color: #ECEFF4; background-color: #272C36;">VarDeclaration</span>
             { <span style=
"color: #ECCC87;">Parser.Parser.</span>name =
               { <span style=
"color: #ECCC87;">Scanner.Scanner.</span>token_type = <span style=
"color: #ECCC87;">Scanner.Scanner.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Identifier</span>;
                 lexeme = <span style=
"color: #A2BF8A;">"y"</span>; literal = <span style=
"color: #ECCC87;">Value.Value.</span><span style=
"color: #ECEFF4; background-color: #272C36;">LoxNil</span>; line = <span style="color: #B58DAE; font-weight: bold;">1</span> };
               init =
               (<span style=
"color: #ECCC87;">Parser.Parser.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Literal</span>
                  { <span style=
"color: #ECCC87;">Parser.Parser.</span>token =
                    { <span style=
"color: #ECCC87;">Scanner.Scanner.</span>token_type = <span style=
"color: #ECCC87;">Scanner.Scanner.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Number</span>;
                      lexeme = <span style=
"color: #A2BF8A;">"2"</span>; literal = (<span style=
"color: #ECCC87;">Value.Value.</span><span style=
"color: #ECEFF4; background-color: #272C36;">LoxNumber</span> <span style="color: #B58DAE; font-weight: bold;">2</span>.);
                      line = <span style=
"color: #B58DAE; font-weight: bold;">1</span> };
                    value = (<span style=
"color: #ECCC87;">Value.Value.</span><span style=
"color: #ECEFF4; background-color: #272C36;">LoxNumber</span> <span style="color: #B58DAE; font-weight: bold;">2</span>.) })
               })
           ])
      ]
    }
<span style="color: #ECCC87;">Resolver.</span>resolve --&gt;
  { <span style=
"color: #ECCC87;">Resolver.Resolver.</span>statements =
    [(<span style=
"color: #ECCC87;">Parser.Parser.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Expression</span>
        (<span style=
"color: #ECCC87;">Parser.Parser.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Literal</span>
           { <span style=
"color: #ECCC87;">Parser.Parser.</span>token =
             { <span style=
"color: #ECCC87;">Scanner.Scanner.</span>token_type = <span style=
"color: #ECCC87;">Scanner.Scanner.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Number</span>;
               lexeme = <span style=
"color: #A2BF8A;">"2"</span>; literal = (<span style=
"color: #ECCC87;">Value.Value.</span><span style=
"color: #ECEFF4; background-color: #272C36;">LoxNumber</span> <span style="color: #B58DAE; font-weight: bold;">2</span>.); line = <span style="color: #B58DAE; font-weight: bold;">1</span> };
             value = (<span style=
"color: #ECCC87;">Value.Value.</span><span style=
"color: #ECEFF4; background-color: #272C36;">LoxNumber</span> <span style="color: #B58DAE; font-weight: bold;">2</span>.) }))
      ];
    scopes = {}; depths = {};
    parsed_statements =
    [(<span style=
"color: #ECCC87;">Parser.Parser.</span><span style=
"color: #ECEFF4; background-color: #272C36;">VarDeclaration</span>
        { <span style="color: #ECCC87;">Parser.Parser.</span>name =
          { <span style=
"color: #ECCC87;">Scanner.Scanner.</span>token_type = <span style=
"color: #ECCC87;">Scanner.Scanner.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Identifier</span>;
            lexeme = <span style=
"color: #A2BF8A;">"x"</span>; literal = <span style=
"color: #ECCC87;">Value.Value.</span><span style=
"color: #ECEFF4; background-color: #272C36;">LoxNil</span>; line = <span style="color: #B58DAE; font-weight: bold;">1</span> };
          init =
          (<span style=
"color: #ECCC87;">Parser.Parser.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Literal</span>
             { <span style=
"color: #ECCC87;">Parser.Parser.</span>token =
               { <span style=
"color: #ECCC87;">Scanner.Scanner.</span>token_type = <span style=
"color: #ECCC87;">Scanner.Scanner.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Number</span>;
                 lexeme = <span style=
"color: #A2BF8A;">"1"</span>; literal = (<span style=
"color: #ECCC87;">Value.Value.</span><span style=
"color: #ECEFF4; background-color: #272C36;">LoxNumber</span> <span style="color: #B58DAE; font-weight: bold;">1</span>.);
                 line = <span style=
"color: #B58DAE; font-weight: bold;">1</span> };
               value = (<span style=
"color: #ECCC87;">Value.Value.</span><span style=
"color: #ECEFF4; background-color: #272C36;">LoxNumber</span> <span style="color: #B58DAE; font-weight: bold;">1</span>.) })
          });
      (<span style=
"color: #ECCC87;">Parser.Parser.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Block</span>
         [(<span style=
"color: #ECCC87;">Parser.Parser.</span><span style=
"color: #ECEFF4; background-color: #272C36;">VarDeclaration</span>
             { <span style=
"color: #ECCC87;">Parser.Parser.</span>name =
               { <span style=
"color: #ECCC87;">Scanner.Scanner.</span>token_type = <span style=
"color: #ECCC87;">Scanner.Scanner.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Identifier</span>;
                 lexeme = <span style=
"color: #A2BF8A;">"y"</span>; literal = <span style=
"color: #ECCC87;">Value.Value.</span><span style=
"color: #ECEFF4; background-color: #272C36;">LoxNil</span>; line = <span style="color: #B58DAE; font-weight: bold;">1</span> };
               init =
               (<span style=
"color: #ECCC87;">Parser.Parser.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Literal</span>
                  { <span style=
"color: #ECCC87;">Parser.Parser.</span>token =
                    { <span style=
"color: #ECCC87;">Scanner.Scanner.</span>token_type = <span style=
"color: #ECCC87;">Scanner.Scanner.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Number</span>;
                      lexeme = <span style=
"color: #A2BF8A;">"2"</span>; literal = (<span style=
"color: #ECCC87;">Value.Value.</span><span style=
"color: #ECEFF4; background-color: #272C36;">LoxNumber</span> <span style="color: #B58DAE; font-weight: bold;">2</span>.);
                      line = <span style=
"color: #B58DAE; font-weight: bold;">1</span> };
                    value = (<span style=
"color: #ECCC87;">Value.Value.</span><span style=
"color: #ECEFF4; background-color: #272C36;">LoxNumber</span> <span style="color: #B58DAE; font-weight: bold;">2</span>.) })
               })
           ])
      ]
    }
<span style="color: #ECCC87;">Resolver.</span>resolve --&gt;
  { <span style=
"color: #ECCC87;">Resolver.Resolver.</span>statements =
    [(<span style=
"color: #ECCC87;">Parser.Parser.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Expression</span>
        (<span style=
"color: #ECCC87;">Parser.Parser.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Literal</span>
           { <span style=
"color: #ECCC87;">Parser.Parser.</span>token =
             { <span style=
"color: #ECCC87;">Scanner.Scanner.</span>token_type = <span style=
"color: #ECCC87;">Scanner.Scanner.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Number</span>;
               lexeme = <span style=
"color: #A2BF8A;">"2"</span>; literal = (<span style=
"color: #ECCC87;">Value.Value.</span><span style=
"color: #ECEFF4; background-color: #272C36;">LoxNumber</span> <span style="color: #B58DAE; font-weight: bold;">2</span>.); line = <span style="color: #B58DAE; font-weight: bold;">1</span> };
             value = (<span style=
"color: #ECCC87;">Value.Value.</span><span style=
"color: #ECEFF4; background-color: #272C36;">LoxNumber</span> <span style="color: #B58DAE; font-weight: bold;">2</span>.) }))
      ];
    scopes = {}; depths = {};
    parsed_statements =
    [(<span style=
"color: #ECCC87;">Parser.Parser.</span><span style=
"color: #ECEFF4; background-color: #272C36;">VarDeclaration</span>
        { <span style="color: #ECCC87;">Parser.Parser.</span>name =
          { <span style=
"color: #ECCC87;">Scanner.Scanner.</span>token_type = <span style=
"color: #ECCC87;">Scanner.Scanner.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Identifier</span>;
            lexeme = <span style=
"color: #A2BF8A;">"x"</span>; literal = <span style=
"color: #ECCC87;">Value.Value.</span><span style=
"color: #ECEFF4; background-color: #272C36;">LoxNil</span>; line = <span style="color: #B58DAE; font-weight: bold;">1</span> };
          init =
          (<span style=
"color: #ECCC87;">Parser.Parser.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Literal</span>
             { <span style=
"color: #ECCC87;">Parser.Parser.</span>token =
               { <span style=
"color: #ECCC87;">Scanner.Scanner.</span>token_type = <span style=
"color: #ECCC87;">Scanner.Scanner.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Number</span>;
                 lexeme = <span style=
"color: #A2BF8A;">"1"</span>; literal = (<span style=
"color: #ECCC87;">Value.Value.</span><span style=
"color: #ECEFF4; background-color: #272C36;">LoxNumber</span> <span style="color: #B58DAE; font-weight: bold;">1</span>.);
                 line = <span style=
"color: #B58DAE; font-weight: bold;">1</span> };
               value = (<span style=
"color: #ECCC87;">Value.Value.</span><span style=
"color: #ECEFF4; background-color: #272C36;">LoxNumber</span> <span style="color: #B58DAE; font-weight: bold;">1</span>.) })
          });
      (<span style=
"color: #ECCC87;">Parser.Parser.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Block</span>
         [(<span style=
"color: #ECCC87;">Parser.Parser.</span><span style=
"color: #ECEFF4; background-color: #272C36;">VarDeclaration</span>
             { <span style=
"color: #ECCC87;">Parser.Parser.</span>name =
               { <span style=
"color: #ECCC87;">Scanner.Scanner.</span>token_type = <span style=
"color: #ECCC87;">Scanner.Scanner.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Identifier</span>;
                 lexeme = <span style=
"color: #A2BF8A;">"y"</span>; literal = <span style=
"color: #ECCC87;">Value.Value.</span><span style=
"color: #ECEFF4; background-color: #272C36;">LoxNil</span>; line = <span style="color: #B58DAE; font-weight: bold;">1</span> };
               init =
               (<span style=
"color: #ECCC87;">Parser.Parser.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Literal</span>
                  { <span style=
"color: #ECCC87;">Parser.Parser.</span>token =
                    { <span style=
"color: #ECCC87;">Scanner.Scanner.</span>token_type = <span style=
"color: #ECCC87;">Scanner.Scanner.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Number</span>;
                      lexeme = <span style=
"color: #A2BF8A;">"2"</span>; literal = (<span style=
"color: #ECCC87;">Value.Value.</span><span style=
"color: #ECEFF4; background-color: #272C36;">LoxNumber</span> <span style="color: #B58DAE; font-weight: bold;">2</span>.);
                      line = <span style=
"color: #B58DAE; font-weight: bold;">1</span> };
                    value = (<span style=
"color: #ECCC87;">Value.Value.</span><span style=
"color: #ECEFF4; background-color: #272C36;">LoxNumber</span> <span style="color: #B58DAE; font-weight: bold;">2</span>.) })
               })
           ])
      ]
    }
- : <span style="color: #ECCC87;">Resolver.</span>t =
{ <span style=
"color: #ECCC87;">Resolver.Resolver.</span>statements =
  [(<span style="color: #ECCC87;">Parser.Parser.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Expression</span>
      (<span style=
"color: #ECCC87;">Parser.Parser.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Literal</span>
         { <span style=
"color: #ECCC87;">Parser.Parser.</span>token =
           { <span style=
"color: #ECCC87;">Scanner.Scanner.</span>token_type = <span style=
"color: #ECCC87;">Scanner.Scanner.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Number</span>;
             lexeme = <span style=
"color: #A2BF8A;">"2"</span>; literal = (<span style=
"color: #ECCC87;">Value.Value.</span><span style=
"color: #ECEFF4; background-color: #272C36;">LoxNumber</span> <span style="color: #B58DAE; font-weight: bold;">2</span>.); line = <span style="color: #B58DAE; font-weight: bold;">1</span> };
           value = (<span style=
"color: #ECCC87;">Value.Value.</span><span style=
"color: #ECEFF4; background-color: #272C36;">LoxNumber</span> <span style="color: #B58DAE; font-weight: bold;">2</span>.) }))
    ];
  scopes = {}; depths = {};
  parsed_statements =
  [(<span style="color: #ECCC87;">Parser.Parser.</span><span style=
"color: #ECEFF4; background-color: #272C36;">VarDeclaration</span>
      { <span style="color: #ECCC87;">Parser.Parser.</span>name =
        { <span style=
"color: #ECCC87;">Scanner.Scanner.</span>token_type = <span style=
"color: #ECCC87;">Scanner.Scanner.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Identifier</span>;
          lexeme = <span style=
"color: #A2BF8A;">"x"</span>; literal = <span style=
"color: #ECCC87;">Value.Value.</span><span style=
"color: #ECEFF4; background-color: #272C36;">LoxNil</span>; line = <span style="color: #B58DAE; font-weight: bold;">1</span> };
        init =
        (<span style=
"color: #ECCC87;">Parser.Parser.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Literal</span>
           { <span style=
"color: #ECCC87;">Parser.Parser.</span>token =
             { <span style=
"color: #ECCC87;">Scanner.Scanner.</span>token_type = <span style=
"color: #ECCC87;">Scanner.Scanner.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Number</span>;
               lexeme = <span style=
"color: #A2BF8A;">"1"</span>; literal = (<span style=
"color: #ECCC87;">Value.Value.</span><span style=
"color: #ECEFF4; background-color: #272C36;">LoxNumber</span> <span style="color: #B58DAE; font-weight: bold;">1</span>.); line = <span style="color: #B58DAE; font-weight: bold;">1</span> };
             value = (<span style=
"color: #ECCC87;">Value.Value.</span><span style=
"color: #ECEFF4; background-color: #272C36;">LoxNumber</span> <span style="color: #B58DAE; font-weight: bold;">1</span>.) })
        });
    (<span style=
"color: #ECCC87;">Parser.Parser.</span><span style="color: #ECEFF4; background-color: #272C36;">Block</span>
       [(<span style=
"color: #ECCC87;">Parser.Parser.</span><span style=
"color: #ECEFF4; background-color: #272C36;">VarDeclaration</span>
           { <span style=
"color: #ECCC87;">Parser.Parser.</span>name =
             { <span style=
"color: #ECCC87;">Scanner.Scanner.</span>token_type = <span style=
"color: #ECCC87;">Scanner.Scanner.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Identifier</span>;
               lexeme = <span style=
"color: #A2BF8A;">"y"</span>; literal = <span style=
"color: #ECCC87;">Value.Value.</span><span style=
"color: #ECEFF4; background-color: #272C36;">LoxNil</span>; line = <span style="color: #B58DAE; font-weight: bold;">1</span> };
             init =
             (<span style=
"color: #ECCC87;">Parser.Parser.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Literal</span>
                { <span style=
"color: #ECCC87;">Parser.Parser.</span>token =
                  { <span style=
"color: #ECCC87;">Scanner.Scanner.</span>token_type = <span style=
"color: #ECCC87;">Scanner.Scanner.</span><span style=
"color: #ECEFF4; background-color: #272C36;">Number</span>;
                    lexeme = <span style=
"color: #A2BF8A;">"2"</span>; literal = (<span style=
"color: #ECCC87;">Value.Value.</span><span style=
"color: #ECEFF4; background-color: #272C36;">LoxNumber</span> <span style="color: #B58DAE; font-weight: bold;">2</span>.);
                    line = <span style=
"color: #B58DAE; font-weight: bold;">1</span> };
                  value = (<span style=
"color: #ECCC87;">Value.Value.</span><span style=
"color: #ECEFF4; background-color: #272C36;">LoxNumber</span> <span style="color: #B58DAE; font-weight: bold;">2</span>.) })
             })
         ])
    ]
  }
utop[<span style=
"color: #B58DAE; font-weight: bold;">8</span>]&gt;
</pre>
        </div>
        <p>Notice how <code>utop</code> now knows how to print the
        <code>Scopes.t</code> and <code>Depths.t</code> types, like
        <code>scopes = { y: declared, }; depths = {};</code>,
        instead of just <code>scopes = &lt;abstr&gt;; depths =
        &lt;abstr&gt;;</code>. This technique is incredibly useful
        for debugging by tracing functions in the REPL and using
        the REPL interactively in general.</p>
        <p>I hope this overview of interactive OCaml development
        with <code>utop</code> was useful. Even though OCaml is a
        language that has an uncompromisingly strict static type
        system, it’s still possible to get some of the useful
        interactive features of more dynamic languages like Lisp
        through a configurable plugin-based REPL and syntax
        extensions that help minimize boilerplate. Sometimes you
        really can have your cake and eat it too!</p>
      </div>
    </div>
    <div class="taglist">
      <a href=
      "https://samarthkishor.github.io/blog/tags.html">Tags</a>:
      <a href=
      "https://samarthkishor.github.io/blog/tag-programming.html">programming</a>
      <a href=
      "https://samarthkishor.github.io/blog/tag-ocaml.html">ocaml</a>
    </div>
  ]]>
      </description>
      <category>
<![CDATA[programming]]>
      </category>
      <category>
<![CDATA[ocaml]]>
      </category>
      <link>
      https://samarthkishor.github.io/blog/interactive-ocaml-development.html</link>
      <pubDate>Sun, 08 Mar 2020 14:28:00 -0400</pubDate>
    </item>
  </channel>
</rss>
